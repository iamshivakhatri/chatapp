import { Configuration, OpenAIApi } from 'openai-edge';
// import { CoreMessage, streamText } from 'ai';


import { CoreMessage,convertToCoreMessages, streamText, Message,  } from 'ai';
import dotenv from 'dotenv';
import { openai } from '@ai-sdk/openai';
import { getContext } from '@/lib/context';
import { db } from '@/lib/db';
import { chats, messages as _messages, summary as _summary } from '@/lib/db/schema';
import { eq } from 'drizzle-orm';
import { NextResponse } from 'next/server';
import { NamespaceSummaryFromJSONTyped } from '@pinecone-database/pinecone/dist/pinecone-generated-ts-fetch/data';

export const maxDuration = 30; // 


export async function POST(req: Request) {
    try {
        // Parse the request body to get the messages array
        const { chatId, messages } = await req.json();
        const summary = await db.select().from(_summary).where(eq(_summary.chatId, chatId));
        console.log("summary", summary);
        // If the summary exists, return it in the expected format
        if (summary.length > 0) {
            // Structure the content as a Message object
            const responseMessages = [{
                id: `${chatId}-summary`, // Unique ID for the message
                role: 'assistant', // Assuming the summary is generated by the assistant
                content: summary[0].content, // Summary content
            }];

            // Return the response as JSON
            return NextResponse.json({ messages: responseMessages });
            // return summary.toDataStreamResponse();

        }
         


        const _chats = await db.select().from(chats).where(eq(chats.id, chatId)) // extract the pdf_name, pdf_url for the chatid
        const lastMessage = messages[0].content; 



        if(_chats.length != 1){
            return NextResponse.json({error: 'chat not found'}, {status: 404});
        }
        const fileKey = _chats[0].fileKey;
        const context = await getContext(lastMessage, fileKey);



        const prompt = {
            role: "system",
            content: `AI assistant is a brand new, powerful, human-like artificial intelligence.
            The traits of AI include expert knowledge, helpfulness, cleverness, and articulateness.
            AI is a well-behaved and well-mannered individual.
            AI is always friendly, kind, and inspiring, and he is eager to provide vivid and thoughtful responses to the user.
            AI has the sum of all knowledge in their brain, and is able to accurately answer nearly any question about any topic in conversation.
            AI assistant is a big fan of Pinecone and Vercel.
            START CONTEXT BLOCK
            ${context}
            END OF CONTEXT BLOCK
            AI assistant will take into account any CONTEXT BLOCK that is provided in a conversation.
            Based on the context provided, the AI assistant will generate a summary of the content.
            `,
          };

 


        console.log("prompt", prompt.content);
        // Use streamText to get a streaming response from OpenAI
        const result = await streamText({
            model: openai('gpt-4o-mini'),
            system: `You are a helpful, respectful, and honest assistant.`,
            prompt: prompt.content,

            // async onFinish({ text, toolCalls, toolResults, finishReason, usage }) {
            //     // implement your own storage logic:
            //     await db.insert(_summary).values({
            //         chatId,
            //         content: text,
            //     });
            // },
            
        });


        // Stream the text response back to the client

        return result.toDataStreamResponse();
   
    



    } catch (error) {
        console.error("Error processing request:", error);
        return new Response(JSON.stringify({ error: 'Failed to process request' }), {
            status: 500,
            headers: {
                'Content-Type': 'application/json',
            },
        });
    }
}
